# -*- coding: utf-8 -*-
"""S&P 500 Stock Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m1mtKftEeqBnLSYdbEUubScOmTzbAOS-

#Importing Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from pandas_datareader.data import DataReader
import yfinance as yf
from pandas_datareader import data as pdr

yf.pdr_override()

from datetime import datetime
end_time = datetime.now()
start_time = datetime(end_time.year - 1, end_time.month, end_time.day)

"""#Data Preprocessing"""

finance_list = ['V','JPM','MA','BAC']

for stock in finance_list:
  globals()[stock] = yf.download(stock,start_time,end_time)

company_list = [V,JPM,MA,BAC]
company_name = ['VISA','JP MORGAN CHASE','MASTERCARD','BANK OF AMERICA']

for company, com_name in zip(company_list, company_name):
  company['company_name'] = com_name

df = pd.concat(company_list, axis=0)
df.head(10)

"""# Analysis"""

df[df['company_name']=='VISA'].describe()

df[df['company_name']=='VISA'].info()

#Closing Price
plt.figure(figsize=(15,10))
for i, company in enumerate(company_list, 1):
    plt.subplot(2, 2, i)
    company['Adj Close'].plot()
    plt.ylabel('Adj Close')
    plt.xlabel(None)
    plt.title(f'Closing Price of {finance_list[i - 1]}')

plt.tight_layout()

#Trading Volume
plt.figure(figsize=(15, 10))
plt.subplots_adjust(top=1.25, bottom=1.2)

for i, company in enumerate(company_list, 1):
    plt.subplot(2, 2, i)
    company['Volume'].plot()
    plt.ylabel('Volume')
    plt.xlabel(None)
    plt.title(f'Volume of {finance_list[i - 1]}')

plt.tight_layout()

#Daily Average Return of Stock
for company in company_list:
  company['Daily Return'] = company['Adj Close'].pct_change()

fig, axes = plt.subplots(nrows=2, ncols=2)
fig.set_figheight(10)
fig.set_figwidth(15)

V['Daily Return'].plot(ax=axes[0,0], legend=True, linestyle='--', marker='o')
axes[0,0].set_title('VISA')

JPM['Daily Return'].plot(ax=axes[0,1], legend=True, linestyle='--', marker='o')
axes[0,1].set_title('JP MORGAN CHASE')

MA['Daily Return'].plot(ax=axes[1,0], legend=True, linestyle='--', marker='o')
axes[1,0].set_title('MASTERCARD')

BAC['Daily Return'].plot(ax=axes[1,1], legend=True, linestyle='--', marker='o')
axes[1,1].set_title('BANK OF AMERICA')

fig.tight_layout()

#histogram of average daily return
plt.figure(figsize=(12,10))

for i, company in enumerate(company_list, 1):
  plt.subplot(2,2,i)
  company['Daily Return'].hist(bins=50)
  plt.xlabel('Daily Return')
  plt.ylabel('Counts')
  plt.title(f'{company_name[i-1]}')

plt.tight_layout()

#correlation between closing prices
closing_df = pdr.get_data_yahoo(finance_list, start=start_time, end=end_time)['Adj Close']
finance_returns = closing_df.pct_change()
finance_returns.head()

return_fig = sns.PairGrid(finance_returns.dropna())

return_fig.map_upper(plt.scatter, color='purple')

return_fig.map_lower(sns.kdeplot, cmap='cool_d')

return_fig.map_diag(plt.hist, bins=30)

returns_fig = sns.PairGrid(closing_df)

returns_fig.map_upper(plt.scatter,color='purple')

returns_fig.map_lower(sns.kdeplot,cmap='cool_d')

returns_fig.map_diag(plt.hist,bins=30)

plt.figure(figsize=(12, 10))

plt.subplot(2, 2, 1)
sns.heatmap(finance_returns.corr(), annot=True, cmap='Reds')
plt.title('Correlation of Return')

plt.subplot(2, 2, 2)
sns.heatmap(closing_df.corr(), annot=True, cmap='Reds')
plt.title('Correlation of Closing Price')

#predicting closing price of individual stocks
df = pdr.get_data_yahoo(('V'),start='2014-01-01', end=datetime.now())
df

#current closing price history
plt.figure(figsize=(16,6))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.show()

data = df.filter(['Close'])
dataset = data.values

train_data_len = int(np.ceil(len(dataset)*.95))
train_data_len

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

#training data
train_data = scaled_data[0:int(train_data_len),:]
x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

from keras.models import Sequential
from keras.layers import Dense, LSTM

model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam',loss='mean_squared_error')
model.fit(x_train, y_train, batch_size=1,epochs=1)

test_data = scaled_data[train_data_len - 60:,:]
x_test = []
y_test = dataset[train_data_len:,:]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i,0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1],1))

pred = model.predict(x_test)
pred = scaler.inverse_transform(pred)

rmse = np.sqrt(np.mean(((pred - y_test)**2)))
rmse

train = data[:train_data_len]
valid = data[train_data_len:]
valid['Predictions'] = pred

plt.figure(figsize=(16,6))
plt.title('Model')
plt.title('Closing over Time')
plt.ylabel('Closing Price USD ($)', fontsize=18)
plt.xlabel('Date', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predictions'],loc='lower right')

plt.show